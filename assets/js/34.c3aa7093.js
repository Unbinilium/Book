(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{144:function(e,t,o){"use strict";o.r(t);var a=o(3),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"advanced-build-for-opencv"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#advanced-build-for-opencv"}},[e._v("#")]),e._v(" Advanced build for OpenCV")]),e._v(" "),o("p",[e._v("OpenCV is a library of programming functions mainly aimed at real-time computer vision and it officially compiled without support for NVIDIA CUDA, INTEL TTB and OpenCL library, that's why we need to rebuild OpenCV with a custom configuration manually.")]),e._v(" "),o("p",[o("em",[e._v("CUDA is a parallel computing platform and programming model developed by Nvidia for general computing on its own GPUs (graphics processing units). CUDA enables developers to speed up compute-intensive applications by harnessing the power of GPUs for the parallelizable part of the computation.")])]),e._v(" "),o("p",[o("em",[e._v("Intel TBB (Threading Building Blocks) makes parallel performance and scalability accessible to software developers who are writing loop- and task-based applications. Build robust applications that abstract platform details and threading mechanisms while achieving performance that scales with increasing core count.")])]),e._v(" "),o("p",[e._v("To begin with, these software libraries should be pre-installed and "),o("strong",[e._v("configured correctly")]),e._v(":")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://visualstudio.microsoft.com/vs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Visual Studio Community"),o("OutboundLink")],1),e._v("  2019  or later with "),o("code",[e._v("Desktop development with C++")]),e._v(" workload installed")]),e._v(" "),o("li",[o("a",{attrs:{href:"https://cmake.org/download/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CMake (cmake-gui)"),o("OutboundLink")],1),e._v(" 3.5 or later with "),o("code",[e._v("Path")]),e._v(" configured")]),e._v(" "),o("li",[o("a",{attrs:{href:"https://www.nvidia.com/Download/index.aspx",target:"_blank",rel:"noopener noreferrer"}},[e._v("NVIDIA GPU Driver"),o("OutboundLink")],1),e._v(" 436 or later with "),o("code",[e._v("Path")]),e._v(" configured")]),e._v(" "),o("li",[o("a",{attrs:{href:"https://developer.nvidia.com/cuda-toolkit",target:"_blank",rel:"noopener noreferrer"}},[e._v("NVIDIA GPU Computing Toolkit"),o("OutboundLink")],1),e._v(" 10 or later with "),o("code",[e._v("Path")]),e._v(" configured")]),e._v(" "),o("li",[o("a",{attrs:{href:"https://developer.nvidia.com/nvidia-video-codec-sdk/download",target:"_blank",rel:"noopener noreferrer"}},[e._v("NVIDIA Video Codec SDK"),o("OutboundLink")],1),e._v(" 9.1 or later and copy to "),o("em",[e._v("NVIDIA GPU Computing Toolkit")]),e._v(" install path")]),e._v(" "),o("li",[o("a",{attrs:{href:"https://visualstudio.microsoft.com/vs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Intel Threading Building Blocks"),o("OutboundLink")],1),e._v(" 2019 or later with "),o("code",[e._v("Path")]),e._v(" configured")]),e._v(" "),o("li",[o("a",{attrs:{href:"https://www.python.org/downloads/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Python3.7"),o("OutboundLink")],1),e._v(" or later with "),o("code",[e._v("Path")]),e._v(" configured")])]),e._v(" "),o("p",[e._v("If there's a Anaconda user, make sure Anaconda is your default Python. You can also try tick "),o("em",[e._v("Register Anaconda as my default Python")]),e._v(" button when installing Anaconda.")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://www.anaconda.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Anaconda3"),o("OutboundLink")],1),e._v(" 2019 or later "),o("code",[e._v("Path")]),e._v(" configured")])]),e._v(" "),o("p",[e._v("To accelerate C++ build speed, try Ninja build system as optional software:")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://ninja-build.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ninja build system"),o("OutboundLink")],1),e._v(" 1.9.0 or later with "),o("code",[e._v("Path")]),e._v(" configured")])]),e._v(" "),o("p",[e._v("For system, I recommend you at least meet the minimal requirements below:")]),e._v(" "),o("ul",[o("li",[e._v("CPU: Core i7 9750H or higher")]),e._v(" "),o("li",[e._v("RAM: 8G DDR4 or bigger")]),e._v(" "),o("li",[e._v("STROAGE: 60GB or bigger")]),e._v(" "),o("li",[e._v("NETWORK: 10Mbps or higher with no dependencies' host blocked or proxy passthrough")])]),e._v(" "),o("p",[e._v("Then download both OpenCV and OpenCV Contrib same version source from Github release and "),o("strong",[e._v("unzip")]),e._v(" them after download finished with "),o("strong",[e._v("MD5 checked")]),e._v(".")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://github.com/opencv/opencv/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenCV"),o("OutboundLink")],1),e._v(" 4.1 or later")]),e._v(" "),o("li",[o("a",{attrs:{href:"https://github.com/opencv/opencv_contrib/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenCV Contrib"),o("OutboundLink")],1),e._v(" 4.1 or later")])]),e._v(" "),o("p",[e._v("To compile by MSBuild with CMake configured, "),o("strong",[e._v("open CMake-GUI")]),e._v(" first. Firstly click "),o("em",[e._v("Browse Source")]),e._v(" button, select path to the folder "),o("strong",[e._v("OpenCV")]),e._v(" unzipped folder. Secondly click "),o("em",[e._v("Browse Build")]),e._v(", create a folder named "),o("code",[e._v("build")]),e._v(" in the path to the folder "),o("strong",[e._v("OpenCV")]),e._v(" unzipped folder, then select path to the "),o("code",[e._v("build")]),e._v(" folder. For example the path should be like this:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("Where is the source code: C\nWhere to build the binaries: C:/opencv/build\n")])])]),o("p",[e._v("Click "),o("em",[e._v("Configure")]),e._v(" button then it pop-up a window, you have to change "),o("strong",[e._v("Specify the generator for the project")]),e._v(" to "),o("em",[e._v("Visual Studio XX 20XX")]),e._v(" (See the newest Visual Studio you have installed, If you want to use Ninja to accelerate build you have to set generator to "),o("em",[e._v("Ninja")]),e._v(") and keep other selection as default if it had already configured.")]),e._v(" "),o("p",[e._v("Then click "),o("em",[e._v("Finish")]),e._v(" button. The missing or unconfigured part will covered with "),o("strong",[e._v("RED background")]),e._v(", the other error is in "),o("strong",[e._v("RED text in output window")]),e._v(", click "),o("em",[e._v("Configure")]),e._v(" button again to check if it solved.")]),e._v(" "),o("p",[e._v("Next we add "),o("code",[e._v("OPEVCV_EXTRA_MODULES_PATH")]),e._v(" with path to the folder "),o("strong",[e._v("OpenCV Contrib")]),e._v(" unzipped, use the "),o("strong",[e._v("modules")]),e._v(" folder "),o("code",[e._v("~/modules")]),e._v(", for example my own path listed here:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("C:/opencv_contrib/modules\n")])])]),o("p",[e._v("Next click "),o("em",[e._v("Configure")]),e._v(" button again and "),o("strong",[e._v("fix missing path")]),e._v(" or "),o("strong",[e._v("any error")]),e._v(" until there is no errors displayed.")]),e._v(" "),o("p",[e._v("When finished default build configuration, it's time to "),o("strong",[e._v("add our custom configuration")]),e._v(". Use "),o("code",[e._v("Search")]),e._v(" bar which located on the top of CMake-GUI to search flags "),o("code",[e._v("WITH_CUDA")]),e._v(", "),o("code",[e._v("WITH_TBB")]),e._v(" and "),o("code",[e._v("WITH_OPENGL")]),e._v(", all tick selected(If you want to build OpenCV Python version, tick "),o("code",[e._v("OPENCV_PYTHON3_VERSION")]),e._v(" selected).")]),e._v(" "),o("p",[e._v("Since NVIDA Developer removed "),o("em",[e._v("cudacodec")]),e._v(", for "),o("em",[e._v("OpenGL")]),e._v(" support you have to unzip "),o("em",[e._v("NVIDIA Video Codec SDK")]),e._v(", then rename "),o("code",[e._v("Lib")]),e._v(" folder to "),o("code",[e._v("lib")]),e._v(" and copy "),o("code",[e._v("include")]),e._v(" & "),o("code",[e._v("lib")]),e._v(" folder to "),o("em",[e._v("NVIDIA GPU Computing Toolkit")]),e._v(" install path like:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.X\n")])])]),o("p",[e._v("Last you have to tick "),o("code",[e._v("WITH_NVCUVID")]),e._v(" selected in "),o("em",[e._v("CMake-GUI")]),e._v(".")]),e._v(" "),o("p",[e._v("Then click "),o("em",[e._v("Configure")]),e._v(" button again and find error the RED background covered. Generally the Intel TBB install path is like this:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("C:\\Program Files(x86)\\IntelSWTools\\compilers_and_libraries\\windows\n")])])]),o("p",[e._v("The configurations example here:")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("TBB_DIR")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("C:\\Program Files (x86)\\IntelSWTools\\compilers_and_libraries\\windows\\redist\\intel64_win\\tbb\\vc_mt\n")])])])]),e._v(" "),o("li",[o("p",[e._v("TBB_ENV_INCLUDE")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("C:\\Program Files (x86)\\IntelSWTools\\compilers_and_libraries\\windows\\tbb\\include\n")])])])]),e._v(" "),o("li",[o("p",[e._v("TBB_ENV_LIB")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/tbb/lib/intel64/vc_mt/tbb.lib\n")])])])]),e._v(" "),o("li",[o("p",[e._v("TBB_ENV_LIB_DEBUG")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/tbb/lib/intel64/vc_mt/tbb_debug.lib\n")])])])]),e._v(" "),o("li",[o("p",[e._v("TBB_VER_FILE (If TBB_DIR not found)")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/tbb/include/tbb/tbb_stddef.h\n")])])])])]),e._v(" "),o("p",[e._v("Next click "),o("em",[e._v("Configure")]),e._v(" button again and "),o("strong",[e._v("fix missing path or error")]),e._v(" until there is "),o("strong",[e._v("no error")]),e._v(" in output as RED background covered. Now click "),o("em",[e._v("Generate")]),e._v(" button to generate "),o("code",[e._v("INSTALL.vcxproj")]),e._v(" in folder "),o("code",[e._v("~\\opencv\\build")]),e._v(" and make there's no error displayed.")]),e._v(" "),o("p",[e._v("Now we start build with "),o("code",[e._v("MSBuild")]),e._v(" and we'd better declare how many CPU cores in order to increase build speed. Firstly we open "),o("strong",[e._v("CMD")]),e._v(" and enter command:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("wmic cpu get NumberOfLogicalProcessors\n")])])]),o("p",[e._v("And the outputs like this:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("NumberOfLogicalProcessors\n12\n")])])]),o("p",[e._v("It means we have "),o("code",[e._v("12 logical processor")]),e._v(" for compiling if 1 thread uses 1 logical processor. Secondly we open "),o("strong",[e._v("xXX Native Tools Command Prompt for VS 20XX")]),e._v(" and use "),o("code",[e._v("cd <~\\opencv\\build>")]),e._v(" to enter "),o("code",[e._v("build")]),e._v(" folder. For example:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("cd C:\\opencv\\build\n")])])]),o("p",[e._v("Then build OpenCV for "),o("code",[e._v("RELEASE")]),e._v(" use command:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("msbuild INSTALL.vcxproj /m:12 /p:Configuration=Release\n")])])]),o("p",[e._v("The arguments "),o("code",[e._v("/m:12")]),e._v(" means use 12 threads to build. Be patient, it takes a long time to build.")]),e._v(" "),o("p",[e._v("At last the build finished and shows:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("9232 Warning(s)\n0 Error(s\nTime Elapsed 02:06:53.91\n")])])]),o("p",[e._v("Don't mind the Warnings. Take a look in folder"),o("code",[e._v("~\\opencv\\build\\install")]),e._v(", all the compiled files here are ready to use. Just set up OpenCV variables path in your VS project and build you project with "),o("strong",[e._v("Release")]),e._v(" Windows Local Debugger.")]),e._v(" "),o("p",[e._v("Add "),o("code",[e._v(".lib")]),e._v(" may be annoying, try command:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("ls '~\\opencv\\install\\x64\\vc16\\lib' | Select-Object -Property Name\n")])])]),o("p",[e._v("In "),o("strong",[e._v("PowerShell")]),e._v(" and copy it when editing "),o("strong",[e._v("Property Pages->Linker->Input->Additional Dependencies")]),e._v(" in Visual Studio project.")])])}),[],!1,null,null,null);t.default=r.exports}}]);